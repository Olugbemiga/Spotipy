# -*- coding: utf-8 -*-
"""Dentsu_DE_TakeHome.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mwJ2Be1MWr8QiWrcINRw1-S7Z46jDF6R
"""

#import libraries
import spotipy
import pandas as pd
from spotipy.oauth2 import SpotifyClientCredentials

#Create Variables( spotify credentials and playlist link )
cid = '00b7317977ad4c0d971af8274f1aa790'
secret = '6efbf45fe72d435f9739d0c0f4c26db5'
playlist_link = 'https://open.spotify.com/playlist/37i9dQZF1DX0XUsuxWHRQd'

#authorization
client_credentials_manager = SpotifyClientCredentials(client_id=cid, client_secret=secret)
sp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)

#DErivationof the playlistID
playlist_URI = playlist_link.split("/")[-1].split("?")[0]
print(playlist_URI)
result = [x["track"]["artists"][0]for x in sp.playlist_tracks(playlist_URI)["items"]]
# results = [x["artists"]for x in sp.artists("artist_id")]

print(result)

#creating Tracks Dataframe
table_ft_list=["track_id","track_name","artist_id","artist_name","album_id","album_name","album_release_date","album_type","track_popularity","track_explicit"]
playlist_df = pd.DataFrame(columns = table_ft_list)
playlist = sp.playlist_tracks(playlist_URI)["items"]
for track in playlist:
  playlistft_dict ={}

  playlistft_dict["track_id"]= track["track"]["id"]
  playlistft_dict["track_name"]= track["track"]["name"]
  playlistft_dict["artist_id"]= track["track"]["artists"][0]["id"]
  playlistft_dict["artist_name"]= track["track"]["artists"][0]["name"]
  playlistft_dict["album_id"]= track["track"]["album"]["id"]
  playlistft_dict["album_name"]= track["track"]["album"]["name"]
  playlistft_dict["album_release_date"]= track["track"]["album"]["release_date"]
  playlistft_dict["album_type"]= track["track"]["album"]["type"]
  playlistft_dict["track_popularity"]= track["track"]["popularity"]
  playlistft_dict["track_explicit"]= track["track"]["explicit"]

  # Concat the dfs
  track_df = pd.DataFrame(playlistft_dict, index = [0])
  playlist_df = pd.concat([playlist_df, track_df], ignore_index = True)

#creating Artist Dataframe

artiste_ft_list=["artist_id","artist_name","popularity","followers"]
artist_df = pd.DataFrame(columns = artiste_ft_list)
Artist_id =  [x["track"]["artists"][0]["uri"]for x in sp.playlist_tracks(playlist_URI)["items"]]
Artist_id = list(set(Artist_id))
for uri  in Artist_id:
  artistft_dict ={}

  artistft_dict["artist_id"]= sp.artist(uri)["id"]
  artistft_dict["artist_name"]=sp.artist(uri)["name"]
  artistft_dict["popularity"]=sp.artist(uri)["popularity"]
  artistft_dict["followers"]= sp.artist(uri)["followers"]["total"]



  # Concat the dfs
  artistft_df = pd.DataFrame(artistft_dict, index = [0])
  artist_df = pd.concat([artist_df, artistft_df], ignore_index = True)

artist_df.head(1)
playlist_df.head(1)

import sqlite3
conn = sqlite3.connect('Rap Caviar') 
c = conn.cursor()
# c.execute('''
#           drop TABLE artists
#           ''')  
# c.execute('''
#           drop TABLE tracks
#           ''')         
playlist_df.to_sql('tracks', conn)
artist_df.to_sql('artists', conn)

# tracks = pd.read_sql('SELECT * FROM tracks', conn)   

conn.commit()

"""# **1).Most_albums_are_released_on**"""

most_albums_are_released_on  = pd.read_sql('SELECT strftime("%w", album_release_date)Day, count(*) Num_releases FROM tracks group by strftime("%w", album_release_date) order by count(*) desc  LIMIT 1 ', conn)
print (most_albums_are_released_on)

"""# **2).Which artists have 3+ tracks? Sort your results by the number of tracks from highest to lowest**


"""

Artist_with_3_or_more_tracks  = pd.read_sql('SELECT artist_name, count(*) Num_releases FROM tracks group by artist_name having count(*)>= 3 order by count(*) desc', conn)
print (Artist_with_3_or_more_tracks)

"""#**3. Which tracks have both a track and artist popularity of at least 90?**#

"""

Tracks_with_track_and_popularity_90  = pd.read_sql('select a.track_name, a.artist_name,a.track_popularity from tracks a where track_popularity>= 90 and exists(select 1 from artists b  where b.popularity >=90 and a.artist_id = b.artist_id)'  , conn)
print (Tracks_with_track_and_popularity_90)

"""#**4). What are the top 3 months for album releases?**"""

from pandas.core import groupby
#Add athe month of releas column to te dataframe
playlist_df['album_release_month'] = pd.DatetimeIndex(playlist_df['album_release_date']).month

#dataframe of tracks by album_release_month
playlist_df_by_month =playlist_df['album_release_month'].value_counts()


#Top 3 album_release_month by count
playlist_df_by_month.head(3)

"""#**5. Are clean or explicit songs more popular on average?**"""

playlist_df.head(2)
playlist_df.groupby(['track_explicit']).sum(['track_popularity'])


#From the output of the above, Explicit songs have a higher popularity

"""#**6. Is there a relationship between track and artist popularity? If so, what is it?**

"""

#merge the arist and playlist datataframs
result = pd.merge(playlist_df, artist_df, how="left", on=["artist_id", "artist_id"])
result.head(100)

# result.corr()

result['popularity'] = result['popularity'].astype(float, errors = 'raise')
result['track_popularity'] = result['track_popularity'].astype(float, errors = 'raise')


correlation = result['track_popularity'].corr(result['popularity'])
print(correlation)
# Track popularity and Artiste Popularity has a correclation of 0.42 which implies there little to no relationship

from google.colab import drive
drive.mount('/content/drive')